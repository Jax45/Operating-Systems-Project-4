Deliverables
1. Have oss create a process control table with one user process (of real-time class) to verify it is working
Done
2. schedule one user process over and over, logging the data
Done
3. Create the round robin queue, add additional user processes, making all the user processes alternate in it.
	Need user process to not take up all time
        Need user process to output throughput
	NEED oss to keep track of if done or still working

4. keep track of and output statistics like thorughput, idle time, etc

5. implement an additional user class and the multilevel feedback queue
        priority, zero, one, two,
6. add the chance for user processes to be blocked on an event. keep track of stats on this
	inside scheduling the [0,3] thing.
Questions:

todo:
random numbers are all generated
user.c updates the pcb
oss.c keeps track of the user's time and outputs it
oss.c bitmap is a char unsigned bitmap
oss.c will kill after so many seconds
oss.c will wait after 100 spawned before spawning anymore.
user.c will have the wait time written out
user.c will have event working
user.c will have random 0-3 working.



Updated todo:
add wait time
add cpu time
add system time
add event wait
add % quantum wait with dRand
add functions for queue (avgwait);
add multilevel queue
add 100 process limit
add 1000 line text limit
output throughput
